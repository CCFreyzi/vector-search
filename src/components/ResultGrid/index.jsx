import React, { useEffect, useMemo, useState } from "react";
import DataTable from "datatables.net-react";
import DT from "datatables.net-dt";
import { useResult } from "../../context/ResultContext";
import { Box, CircularProgress } from "@mui/material";
import RangeSlider from "../inputs/price-input";
import "../../index.css";

DataTable.use(DT);

const monthsShort = {
  "01": "—Å—ñ—á.",
  "02": "–ª—é—Ç.",
  "03": "–±–µ—Ä.",
  "04": "–∫–≤—ñ—Ç.",
  "05": "—Ç—Ä–∞–≤.",
  "06": "—á–µ—Ä–≤.",
  "07": "–ª–∏–ø.",
  "08": "—Å–µ—Ä–ø.",
  "09": "–≤–µ—Ä.",
  10: "–∂–æ–≤—Ç.",
  11: "–ª–∏—Å—Ç.",
  12: "–≥—Ä—É–¥.",
};

const formatDateDisplay = (dateString) => {
  if (!dateString) return "";
  const [datePart] = dateString.split(" ");
  const [year, month, day] = datePart.split("-");
  return `${parseInt(day, 10)} ${monthsShort[month]} ${year}`;
};

const formatPrice = (price) => {
  if (!price) return "0,00";
  return Number(price).toFixed(2).replace(".", ",");
};

const ResultGrid = () => {
  const { results, loading } = useResult();

  const [minPrice, setMinPrice] = useState(0);
  const [maxPrice, setMaxPrice] = useState(0);
  const [priceRange, setPriceRange] = useState([0, 0]);
  const [filteredResults, setFilteredResults] = useState([]);

  useEffect(() => {
    if (!results || results.length === 0) return;

    const prices = results.map((item) => Math.floor(item.costs));
    const min = Math.min(...prices);
    const max = Math.max(...prices);

    setMinPrice(min);
    setMaxPrice(max);
    setPriceRange([min, max]);
    setFilteredResults(results);
  }, [results]);

  const handleSliderChange = ([min, max]) => {
    setPriceRange([min, max]);
    const filtered = results.filter(
      (item) => item.costs >= min && item.costs <= max
    );
    setFilteredResults(filtered);
  };

  const columns = useMemo(
    () => [
      { title: "–¢–æ–≤–∞—Ä", data: "tovar_name", className: "product-column" },
      { title: "–¢–æ–≤–∞—Ä 1–°", data: "name_tovar_1C", className: "product-1c-column" },
      { title: "–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫", data: "name", className: "supplier-column" },
      { title: "–í–∞—Ä—Ç—ñ—Å—Ç—å (‚Ç¥)", data: "costs", className: "price-column" },
      { title: "–í–∞—Ä—Ç—ñ—Å—Ç—å –∑ –ü–î–í (‚Ç¥)", data: "costs_NDS", className: "price-column" },
      {
        title: "–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥—É",
        data: "date_prihod",
        render: (data, type) => {
          if (type === "display") return formatDateDisplay(data);
          return data ? new Date(data.split(" ")[0]).getTime() : 0;
        },
        type: "num",
      },
    ],
    []
  );

  const dataWithIndex = useMemo(() => {
    return (filteredResults || []).map((item) => ({
      ...item,
      costs: formatPrice(item.costs),
      costs_NDS: formatPrice(item.costs_NDS),
    }));
  }, [filteredResults]);

  if (loading) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
          height: "100vh",
          gap: "30px",
        }}
      >
        <CircularProgress />
        <p>
          –®–Ü –¥—É–º–∞—î –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é ü§ñ –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —â–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥. –î—è–∫—É—î–º–æ
          –∑–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        </p>
      </Box>
    );
  }

  if (!results || results.length === 0) {
    return (
      <div style={{ textAlign: "center", padding: "20px" }}>
        –í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç.
      </div>
    );
  }

  return (
    <Box sx={{ padding: 2 }}>
      {minPrice !== maxPrice && maxPrice !== 0 && (
        <Box sx={{ display: "flex", justifyContent: "flex-end", mb: 2 }}>
          <RangeSlider
            minPrice={minPrice}
            maxPrice={maxPrice}
            value={priceRange}
            onChange={handleSliderChange}
          />
        </Box>
      )}

      <DataTable
        data={dataWithIndex}
        columns={columns}
        className="display"
        theme="dark"
        options={{
          dom: 'lrtip',
          order: [[5, "desc"]],
          language: {
            search: "–ü–æ—à—É–∫:",
            zeroRecords: "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç.",
            lengthMenu: "–ü–æ–∫–∞–∑–∞—Ç–∏ _MENU_ –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É",
            info: "–ü–æ–∫–∞–∑–∞–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É _PAGE_ –∑ _PAGES_",
            infoEmpty: "–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            infoFiltered: "(–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑ _MAX_ –∑–∞–ø–∏—Å—ñ–≤)",
          },
        }}
      >
        <thead>
          <tr>
            <th>–¢–æ–≤–∞—Ä</th>
            <th>–¢–æ–≤–∞—Ä 1–°</th>
            <th>–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫</th>
            <th>–í–∞—Ä—Ç—ñ—Å—Ç—å (‚Ç¥)</th>
            <th>–í–∞—Ä—Ç—ñ—Å—Ç—å –∑ –ü–î–í (‚Ç¥)</th>
            <th>–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥—É</th>
          </tr>
        </thead>
      </DataTable>
    </Box>
  );
};

export default ResultGrid;
